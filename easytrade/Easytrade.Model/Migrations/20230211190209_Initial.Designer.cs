// <auto-generated />
using System;
using System.Collections.Generic;
using Easytrade.Model.DbAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Easytrade.Model.Migrations
{
    [DbContext(typeof(EasyTradeDbContext))]
    [Migration("20230211190209_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Easytrade.Model.Domain.Bots.Bot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Allocation")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("DayProfit")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxOpenPositions")
                        .HasColumnType("integer");

                    b.Property<decimal>("MinimumAllocation")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("Symbols")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<decimal?>("TotalProfit")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Bots");
                });

            modelBuilder.Entity("Easytrade.Model.Domain.Bots.BuyOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<long>("BotId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Fee")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Pair")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ProfitLossId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Rate")
                        .HasColumnType("numeric");

                    b.Property<long>("ReferenceOrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BotId");

                    b.ToTable("BuyOrders");
                });

            modelBuilder.Entity("Easytrade.Model.Domain.Bots.ProfitLoss", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BuyOrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Result")
                        .HasColumnType("numeric");

                    b.Property<long>("SellOrderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BuyOrderId")
                        .IsUnique();

                    b.HasIndex("SellOrderId")
                        .IsUnique();

                    b.ToTable("ProfitsLosses");
                });

            modelBuilder.Entity("Easytrade.Model.Domain.Bots.SellOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<long>("BotId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Fee")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Pair")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ProfitLossId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Rate")
                        .HasColumnType("numeric");

                    b.Property<long>("ReferenceOrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BotId");

                    b.ToTable("SellOrders");
                });

            modelBuilder.Entity("Easytrade.Model.Domain.Bots.BuyOrder", b =>
                {
                    b.HasOne("Easytrade.Model.Domain.Bots.Bot", "Bot")
                        .WithMany("BuyOrders")
                        .HasForeignKey("BotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bot");
                });

            modelBuilder.Entity("Easytrade.Model.Domain.Bots.ProfitLoss", b =>
                {
                    b.HasOne("Easytrade.Model.Domain.Bots.BuyOrder", "BuyOrder")
                        .WithOne("ProfitLoss")
                        .HasForeignKey("Easytrade.Model.Domain.Bots.ProfitLoss", "BuyOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Easytrade.Model.Domain.Bots.SellOrder", "SellOrder")
                        .WithOne("ProfitLoss")
                        .HasForeignKey("Easytrade.Model.Domain.Bots.ProfitLoss", "SellOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuyOrder");

                    b.Navigation("SellOrder");
                });

            modelBuilder.Entity("Easytrade.Model.Domain.Bots.SellOrder", b =>
                {
                    b.HasOne("Easytrade.Model.Domain.Bots.Bot", "Bot")
                        .WithMany("SellOrders")
                        .HasForeignKey("BotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bot");
                });

            modelBuilder.Entity("Easytrade.Model.Domain.Bots.Bot", b =>
                {
                    b.Navigation("BuyOrders");

                    b.Navigation("SellOrders");
                });

            modelBuilder.Entity("Easytrade.Model.Domain.Bots.BuyOrder", b =>
                {
                    b.Navigation("ProfitLoss");
                });

            modelBuilder.Entity("Easytrade.Model.Domain.Bots.SellOrder", b =>
                {
                    b.Navigation("ProfitLoss");
                });
#pragma warning restore 612, 618
        }
    }
}
